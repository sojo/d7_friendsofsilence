<?php

/**
 * @file
 * This is an example outlining how a module can be used to display a
 * custom page at a given URL.
 */

/**
 * @defgroup fos_custom Example: Page
 * @ingroup examples
 * @{
 */


/**
 * Implementation of hook_menu().
 *
 * hook_menu() must be implemented to emit items to place in the main menu.
 * This is a required step for modules wishing to display their own pages,
 * because the process of creating the links also tells Drupal what
 * callback function to use for a given URL. The menu items returned
 * here provide this information to the menu system.
 *
 */
function fos_custom_menu() {
  $items['api/v1/count-keyword'] = array(
    'title' => 'count keyword',
    'page callback' => 'fos_custom_count_keyword',
    'access callback' => TRUE,
  );
  $items['api/v1/count-taxonomy'] = array(
    'title' => 'count taxonomy',
    'page callback' => 'fos_custom_count_taxonomy',
    'access callback' => TRUE,
  );
  $items['api/v1/fos-is-hidden'] = array(
    'title' => 'Is Hidden',
    'page callback' => 'fos_custom_is_hidden',
    'access callback' => TRUE,
  );
  $items['api/v1/settings-list'] = array(
    'title' => 'API Settings List',
    'page callback' => 'fos_custom_api_settings_list',
    'access callback' => TRUE,
  );
    $items['api/v1/setting'] = array(
    'title' => 'API Settings List',
    'page callback' => 'fos_custom_api_setting',
    'access callback' => TRUE,
  );
	$items['api/v1/spin-list'] = array(
    'title' => 'Spin List',
    'page callback' => 'fos_custom_spin_list',
    'access callback' => TRUE,
  );
	$items['api/v1/spin-count'] = array(
    'title' => 'Spin Count',
    'page callback' => 'fos_custom_spin_count',
    'access callback' => TRUE,
  );
	$items['api/v1/views/taxonomylist'] = array(
    'title' => 'Taxonomy List',
    'page callback' => 'fos_custom_taxonomy_list',
    'access callback' => TRUE,
  );
  
  
  return $items;
}

function fos_custom_count_keyword () {
	$keyword_list = $_GET['keyword'];
	$keywords = explode(" ", $keyword_list);
	//$keywords = str_getcsv($keyword_list, " ");
	
	$qry = "select count(n.nid) as count, '$keyword_list' as keyword from node n ";
  $qry .= "left outer join field_data_body b on n.vid = b.revision_id ";
  $qry .= "left outer join field_data_field_quotation_bi_line l on n.vid = l.revision_id ";
  $qry .= "where n.status = 1 ";
  $qry .= "and n.type = 'quotation' ";
  $qry .= "and (";
  foreach ($keywords as $keyword) {
    $qry .= "b.body_value like '%" . $keyword . "%' or ";
  }
  foreach ($keywords as $keyword) {
    $qry .= "l.field_quotation_bi_line_value like '%" . $keyword . "%' or ";
  }
  foreach ($keywords as $keyword) {
    $qry .= "n.title like '" . $keyword . "%' or ";
  }
	$qry .= "1=2)";
	$count = db_query($qry)->fetchObject();
	return drupal_json_output($count);
}

function fos_custom_count_keyword2 () {
	$keyword = $_GET['keyword'];
	$qry = "select count(n.nid) as count, '$keyword' as keyword from node n ";
  $qry .= "left outer join field_data_body b on n.vid = b.revision_id ";
  $qry .= "left outer join field_data_field_quotation_bi_line l on n.vid = l.revision_id ";
  $qry .= "where n.status = 1 ";
  $qry .= "and n.type = 'quotation' ";
  $qry .= "and (b.body_value like '%" . $keyword . "%' ";
  $qry .= "or l.field_quotation_bi_line_value like '%" . $keyword . "%' ";
  $qry .= "or n.title like '" . $keyword ."%')";
	$count = db_query($qry)->fetchObject();
	return drupal_json_output($count);
}


function fos_custom_api_settings_list () {
	$qry = 'select n.nid, n.title ';
	$qry .= 'from node n ';
	$qry .= "where n.type = 'app_settings'";
	//$qry = db_query($qry);
	//return 'this is a test';
	return drupal_json_output(db_query($qry)->fetchAll());
}

function fos_custom_api_setting () {
	$nid = $_GET['nid'];
	$qry = 'select n.nid, n.title, b.body_value ';
	$qry .= 'from node n ';
	$qry .= 'inner join field_data_body b on n.nid = b.entity_id ';
	$qry .= "where n.type = 'app_settings' and n.nid = " . $nid;
	//$qry = db_query($qry);
	//return 'this is a test';
	return drupal_json_output(db_query($qry)->fetchObject());
}

function fos_custom_count_taxonomy () {
/***
select count(t.nid) as count, d.name, t.tid
from taxonomy_index t
inner join taxonomy_term_data d on t.tid = d.tid
where 
d.vid = 1 and
d.name = 'angels';

tags 1
authors 2
source 3
ebook 8
***/
	$tid = $_GET['tid'];
	$qry = "select count(nid) as count from taxonomy_index where tid = " . $tid;
	$count = db_query($qry)->fetchObject();
	return drupal_json_output($count);
}

function fos_custom_is_hidden () {
  return drupal_json_output(array(
    'isHidden' => false,
  ));
}

function fos_custom_spin_list () {
  $qry = '';
  $qry .= "select d.name as spin_name, ";
  $qry .= "(select replace(group_concat(d2.name), ',', ' ') ";
  $qry .= "from taxonomy_term_data d2 ";
  $qry .= "inner join taxonomy_term_hierarchy h2 on d2.tid = h2.tid ";
  $qry .= "where d2.vid = 9 ";
  $qry .= "and (d2.tid = d.tid or h2.parent = d.tid) ";
  $qry .= "order by d2.name) as keyword ";
  $qry .= "from taxonomy_term_data d ";
  $qry .= "inner join taxonomy_term_hierarchy h on d.tid = h.tid ";
  $qry .= "where d.vid = 9 ";
  $qry .= "and h.parent = 0 ";
  $qry .= "order by d.name";

	return drupal_json_output(db_query($qry)->fetchAll());
	
}

function fos_custom_spin_count () {
  $qry = '';
  $qry .= "select count(*) as count ";
  $qry .= "from taxonomy_term_data d ";
  $qry .= "inner join taxonomy_term_hierarchy h on d.tid = h.tid ";
  $qry .= "where d.vid = 9 ";
  $qry .= "and h.parent = 0 ";

	$count = db_query($qry)->fetchObject();
	return drupal_json_output($count);
}

function fos_custom_taxonomy_list () {
	$vocabulary = $_GET['vocabulary'];
	
	$qry = "SELECT taxonomy_term_data.tid AS tid, ";
	$qry .= "taxonomy_vocabulary.name AS vocabulary, ";
	$qry .= "taxonomy_term_data.name AS name, ";
	$qry .= "COUNT(taxonomy_vocabulary.name) AS count ";
	$qry .= "FROM taxonomy_term_data taxonomy_term_data ";
	$qry .= "LEFT JOIN taxonomy_index taxonomy_index ON taxonomy_term_data.tid = taxonomy_index.tid ";
	$qry .= "LEFT JOIN node node_taxonomy_index ON taxonomy_index.nid = node_taxonomy_index.nid ";
	$qry .= "LEFT JOIN taxonomy_vocabulary taxonomy_vocabulary ON taxonomy_term_data.vid = taxonomy_vocabulary.vid ";
	$qry .= "WHERE (( (node_taxonomy_index.type IN  ('quotation')) and taxonomy_vocabulary.name = '$vocabulary')) ";
	$qry .= "GROUP BY name";

	drupal_add_http_header('Content-Type', 'application/json');

	return drupal_json_output_revised(db_query($qry)->fetchAll());

}

function drupal_json_output_revised($var = NULL) {
  // We are returning JSON, so tell the browser.
  drupal_add_http_header('Content-Type', 'application/json');

  if (isset($var)) {
    echo drupal_json_encode_revised($var);
  }
}

function drupal_json_encode_revised($var) {
  // The PHP version cannot change within a request.
  return json_encode($var, JSON_HEX_TAG | JSON_HEX_AMP | JSON_HEX_QUOT);
}